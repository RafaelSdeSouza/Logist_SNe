setwd("~/Dropbox/artigos/Meusartigos/IAA-WGC/Github/Logist_SNe/script")
# Bayesian  Logistic Regression using JAGS
#  Required libraries
library(rjags)
library(ggmcmc)
library(ggplot2)
library(ggthemes)
library(pander)
library(Cairo)
library(plyr)
library(MASS)
library(scales)
library(plyr)
#Read dataset
data.0= read.fwf(file="..//data//snsdss.dat",width = c(7,1, 11, 9, 1,9,1,8,2,1,
11,1,1,26,2,14,10,9,10,1,
1,1,2,6,5,5,6,6,6,7,7))
# Select few variables for test. For now, galaxy morphology and SN type
SN_cat<-data.frame(SNtype=data.0[,11],Galtype=data.0[,19])
SN_cat2<-na.omit(SN_cat)
require(gdata)
SN_cat2$SNtype<-trim(SN_cat2$SNtype)
SN_cat3<-SN_cat2[which(SN_cat2$SNtype=="Ia"|SN_cat2$SNtype=="II"|SN_cat2$SNtype=="Ia"|
SN_cat2$SNtype=="Ib"|SN_cat2$SNtype=="Ib/c"|SN_cat2$SNtype=="Ic"),]
SN_cat3$SNtype<-droplevels(SN_cat3$SNtype)
SN_cat3$SNtype<-revalue(SN_cat3$SNtype,c("Ia"="Ia","Ib"="CC","Ib/c"="CC","Ic"="CC","II"="CC"))
# Start the logit model
# Define data for JAGS
#X<-model.matrix(~ M_gal + log_sSFR + g.r+
#                r.i+i.z, data = SNedata3)
SN_cat3$Galtype<-trim(SN_cat3$Galtype)
SN_cat3$Galtype2<-revalue(SN_cat3$Galtype, c("E pec" ="E", "E/S0 pec"="E/S0","S pec"="S","S0 pec"="S0",
"S0/a"="S0","S0/a pec"="S0","Sa"="S","Sa pec"="S","Sab"="S","Sab pec"="S","Sb"="S","Sb pec"="S",
"Sbc"="S","Sbc pec"="S","Sc"="S","Sc pec"="S","Scd"="S",
"Scd pec"="S","Sd"="S",
"Sd pec"="S","Sdm"="S","Sdm pec"="S","Sm"="S"))
SN_cat4<-SN_cat3[which(SN_cat3$Galtype2=="E"|SN_cat3$Galtype2=="E/S0"|SN_cat3$Galtype2=="Im"|
SN_cat3$Galtype2=="S"|SN_cat3$Galtype2=="S0"),]
SN_cat4$Galtype2<-droplevels(SN_cat4$Galtype2)
X<-model.matrix(~ Galtype2-1, data = SN_cat4)
K<-ncol(X)
typeSne<-as.numeric(SN_cat4$SNtype)-1
jags.data <- list(Y= typeSne,
N = nrow(SN_cat4),
X = X,
b0 = rep(0, K),
B0 = diag(0.00001, K))
model<-"model{
#1. Priors
tau.R<-pow(sdBeta,-1)
sdBeta ~ dgamma(0.01,0.01)
for(j in 1:5){
beta[j] ~ ddexp(0,tau.R)
}
beta.0~dnorm(0,1e-6)
#2. Likelihood
for (i in 1:N){
Y[i] ~ dbern(p[i])
logit(p[i]) <-  eta[i]
eta[i] <- beta.0+inprod(beta[], X[i,])
#3. Prediction
prediction[i]~dbern(p[i])
}
}"
inits<-function () {
list(beta = rnorm(K, 0, 0.1))}
params <- c("beta","prediction")
jags.logit<-jags.model(
data = jags.data,
inits = inits(),
textConnection(model),
n.chains = 3,
n.adapt=1000
)
update(jags.logit, 25000)
posterior.logit <- coda.samples(jags.logit, params, n.iter = 50000)
require(ggmcmc)
L.factors <- data.frame(
Parameter=paste("beta[", seq(1:6), "]", sep=""),
Label=c("beta.0","E","E/S0","Im","S","S0"))
head(L.factors)
beta_post<-ggs(posterior.logit,par_labels=L.factors,family=c("beta"))
ggs_caterpillar(beta_post)
ggs_density(beta_post)
ggmcmc(beta_post)
ggs_caterpillar(beta_post)
ggs_caterpillar(beta_post)+theme_hc()
ggs_caterpillar(beta_post)+theme_stata()
pdf("betas.pdf",width=10,heigth=10)
ggs_caterpillar(beta_post)+theme_stata()
dev.off()
pdf("betas.pdf",width=10,height=10)
ggs_caterpillar(beta_post)+theme_stata()
dev.off()
pdf("betas.pdf",width=7,height=7)
ggs_caterpillar(beta_post)+theme_stata()
dev.off()
pdf("betas.pdf",width=7,height=7)
ggs_caterpillar(beta_post)+theme_stata()+ylab("")
dev.off()
pdf("..//figures/betas.pdf",width=7,height=7)
ggs_caterpillar(beta_post)+theme_stata()+ylab("")
dev.off()
ggs_density(beta_post)
pdf("..//figures/density.pdf",width=7,height=7)
ggs_density(beta_post)
dev.off()
exp(3)/(1+exp(3))
pdf("..//figures/density.pdf",width=7,height=7)
ggs_density(beta_post)+theme_stata()+ylab("")
dev.off()
inits<-function () {
list(beta = rnorm(K, 0, 0.1))}
params <- c("beta","prediction")
inits()
inits1=inits()
inits2=inits()
inits3=inits()
inits3
library(parallel)
cl <- makeCluster(3)
jags.logit <- run.jags(method="rjparallel", method.options=list(cl=cl),
data = jags.data,
inits = list(inits1,inits2,inits3),
model=model,
n.chains = 3,
adapt=2500,
monitor=c(params),
burnin=20000,
sample=30000,
summarise=FALSE,
thin=5,
plots=FALSE
)
jagssamples <- as.mcmc.list(jags.logit)
require(runjags)
library(parallel)
cl <- makeCluster(3)
jags.logit <- run.jags(method="rjparallel", method.options=list(cl=cl),
data = jags.data,
inits = list(inits1,inits2,inits3),
model=model,
n.chains = 3,
adapt=2500,
monitor=c(params),
burnin=20000,
sample=30000,
summarise=FALSE,
thin=5,
plots=FALSE
)
jagssamples <- as.mcmc.list(jags.logit)
beta_post<-ggs(jagssamples,par_labels=L.factors,family=c("beta"))
ggs_caterpillar(beta_post)+theme_stata()+ylab("")
pdf("..//figures/density.pdf",width=7,height=7)
ggs_density(beta_post)+theme_stata()+ylab("")
dev.off()
pdf("..//figures/density.pdf",width=7,height=10)
ggs_density(beta_post)+theme_stata()+ylab("")
dev.off()
pdf("..//figures/betas.pdf",width=7,height=7)
ggs_caterpillar(beta_post)+theme_stata()+ylab("")
dev.off()
summary(jagssamples)
summary(jags.logit)
summary<-extend.jags(jags.logit,drop.monitor=c("prediction"), summarise=TRUE)
summary
X
X[1,]
X[1:10,]
predtype<-summary(as.mcmc.list(jags.logit, vars="prediction"),quantiles=c(0.5))
predtype
predtype$quantiles
summary(predtype$quantiles)
predtype<-summary(as.mcmc.list(jags.logit, vars="prediction"))
predtype
predtype[1,]
predtype[,1]
predtype$quantiles
predtype$quantiles[,3]
predtype$quantiles[1,3]
predtype$quantiles[1,]
require(mlearning)
require(caret)
SNe_conf<-confusion(predtype[,3], typeSne)
xtab <- table(predtype[,3], typeSne)
confusionMatrix(xtab)
typeSne
predtype[,3]
predtype<-predtype$quantiles
SNe_conf<-confusion(predtype[,3], typeSne)
predtype[,3]
xtab <- table(predtype[,3], typeSne)
confusionMatrix(xtab)
xtab <- table(predtype[,4], typeSne)
confusionMatrix(xtab)
xtab <- table(predtype[,5], typeSne)
confusionMatrix(xtab)
xtab <- table(predtype[,3], typeSne)
confusionMatrix(xtab)
SN_cat[1,]
data.0[1,]
data.0[,29]
data.0[,30]
data.0[,29]
SN_cat<-data.frame(SNtype=data.0[,11],Galtype=data.0[,19],mag_g=data.0[,29])
SN_cat2<-na.omit(SN_cat)
require(gdata)
SN_cat2$SNtype<-trim(SN_cat2$SNtype)
SN_cat3<-SN_cat2[which(SN_cat2$SNtype=="Ia"|SN_cat2$SNtype=="II"|SN_cat2$SNtype=="Ia"|
SN_cat2$SNtype=="Ib"|SN_cat2$SNtype=="Ib/c"|SN_cat2$SNtype=="Ic"),]
SN_cat3$SNtype<-droplevels(SN_cat3$SNtype)
SN_cat3$SNtype<-revalue(SN_cat3$SNtype,c("Ia"="Ia","Ib"="CC","Ib/c"="CC","Ic"="CC","II"="CC"))
SN_cat3$Galtype<-trim(SN_cat3$Galtype)
SN_cat3$Galtype2<-revalue(SN_cat3$Galtype, c("E pec" ="E", "E/S0 pec"="E/S0","S pec"="S","S0 pec"="S0",
"S0/a"="S0","S0/a pec"="S0","Sa"="S","Sa pec"="S","Sab"="S","Sab pec"="S","Sb"="S","Sb pec"="S",
"Sbc"="S","Sbc pec"="S","Sc"="S","Sc pec"="S","Scd"="S",
"Scd pec"="S","Sd"="S",
"Sd pec"="S","Sdm"="S","Sdm pec"="S","Sm"="S"))
SN_cat4<-SN_cat3[which(SN_cat3$Galtype2=="E"|SN_cat3$Galtype2=="E/S0"|SN_cat3$Galtype2=="Im"|
SN_cat3$Galtype2=="S"|SN_cat3$Galtype2=="S0"),]
SN_cat4$Galtype2<-droplevels(SN_cat4$Galtype2)
galtype<-match(SN_cat4$Galtype2,unique(SN_cat4$Galtype2))
Ntype<-length(unique(SN_cat4$Galtype2))
galtype
SN_cat4$Galtype2
unique(SN_cat4$Galtype2)
match(SN_cat4$Galtype2,unique(SN_cat4$Galtype2))
unique(SN_cat4$Galtype2)
match(SN_cat4$Galtype2,unique("E","E/S0","S0","S","Im"))
match(SN_cat4$Galtype2,unique(c("E","E/S0","S0","S","Im")))
match(SN_cat4$Galtype2,c("E","E/S0","S0","S","Im"))
galtype<-match(SN_cat4$Galtype2,c("S","S0","E/S0","E","Im"))
galtype
setwd("~/Dropbox/artigos/Meusartigos/IAA-WGC/Github/Logist_SNe/script")
match(SN_cat4$Galtype2,c("E","E/S0","S0","S","Im"))
# Script to prepare data set for logit analysis
#Read dataset
data.0= read.fwf(file="..//data//snsdss.dat",width = c(7,1, 11, 9, 1,9,1,8,2,1,
11,1,1,26,2,14,10,9,10,1,
1,1,2,6,5,5,6,6,6,7,7))
# Select few variables for test. For now, galaxy morphology and SN type
SN_cat<-data.frame(SNtype=data.0[,11],Galtype=data.0[,19],mag_g=data.0[,29])
SN_cat2<-na.omit(SN_cat)
require(gdata)
SN_cat2$SNtype<-trim(SN_cat2$SNtype)
SN_cat3<-SN_cat2[which(SN_cat2$SNtype=="Ia"|SN_cat2$SNtype=="II"|SN_cat2$SNtype=="Ia"|
SN_cat2$SNtype=="Ib"|SN_cat2$SNtype=="Ib/c"|SN_cat2$SNtype=="Ic"),]
SN_cat3$SNtype<-droplevels(SN_cat3$SNtype)
SN_cat3$SNtype<-revalue(SN_cat3$SNtype,c("Ia"="Ia","Ib"="CC","Ib/c"="CC","Ic"="CC","II"="CC"))
# Start the logit model
# Define data for JAGS
#X<-model.matrix(~ M_gal + log_sSFR + g.r+
#                r.i+i.z, data = SNedata3)
SN_cat3$Galtype<-trim(SN_cat3$Galtype)
SN_cat3$Galtype2<-revalue(SN_cat3$Galtype, c("E pec" ="E", "E/S0 pec"="E/S0","S pec"="S","S0 pec"="S0",
"S0/a"="S0","S0/a pec"="S0","Sa"="S","Sa pec"="S","Sab"="S","Sab pec"="S","Sb"="S","Sb pec"="S",
"Sbc"="S","Sbc pec"="S","Sc"="S","Sc pec"="S","Scd"="S",
"Scd pec"="S","Sd"="S",
"Sd pec"="S","Sdm"="S","Sdm pec"="S","Sm"="S"))
SN_cat4<-SN_cat3[which(SN_cat3$Galtype2=="E"|SN_cat3$Galtype2=="E/S0"|SN_cat3$Galtype2=="Im"|
SN_cat3$Galtype2=="S"|SN_cat3$Galtype2=="S0"),]
SN_cat4$Galtype2<-droplevels(SN_cat4$Galtype2)
SN_cat4
SN_cat4[1,]
write.table(SN_cat4,"clean_cat.dat")
require(MASS)
write.matrix(SN_cat4,"clean_cat.dat")
write.matrix(SN_cat4,"..\\data\clean_cat.dat")
write.matrix(SN_cat4,"..//data/clean_cat.dat")
data.0= read.table(file="..//data//clean_cat.dat",header=TRUE)
data.0
data.0= read.table(file="..//data//clean_cat.dat",header=TRUE)
SN_cat4[,c(1,3,4)]
write.matrix(SN_cat4[,c(1,3,4)],"..//data/clean_cat.dat")
data.0= read.table(file="..//data//clean_cat.dat",header=TRUE)
data.0
galtype<-match(SN_cat4$Galtype2,c("S","S0","E/S0","E","Im"))
Ntype<-length(unique(SN_cat4$Galtype2))
data.0[1,]
Ntype
galtype
jags.data <- list(Y= typeSne,
N = nrow(SN_cat4),
mag_g = data.0$mag_g,
galtype = galtype,
Ntype=Ntype
)
as.numeric(SN_cat4$SNtype)
unique(SN_cat4$SNtype)
match(SN_cat4$SNtype,unique(SN_cat4$SNtype))
typeSne<-as.numeric(SN_cat4$SNtype)-1
jags.data <- list(Y= typeSne,
N = nrow(SN_cat4),
mag_g = data.0$mag_g,
galtype = galtype,
Ntype=Ntype
)
jags.data
SN_cat4$SNtype
model<-"model{
#1. Priors
tau.R<-pow(sdBeta,-1)
sdBeta ~ dgamma(0.01,0.01)
# Random intercept
for (j in 1:Ntype){
ranef[j]~ddexp(0,tau.R)
}
beta.0~dnorm(0,0.001)
beta.1~dnorm(0,0.001)
#2. Likelihood
for (i in 1:N){
Y[i] ~ dbern(p[i])
logit(p[i]) <-  eta[i]
eta[i] <- beta.0+beta.1*mag_g[i]+ranef[galtype[i]]
#3. Prediction
prediction[i]~dbern(p[i])
}
}"
inits<-function () {
list(beta = rnorm(Ntype, 0, 0.1))}
params <- c("beta","prediction","ranef")
inits1=inits()
inits2=inits()
inits3=inits()
library(parallel)
cl <- makeCluster(3)
jags.logit <- run.jags(method="rjparallel", method.options=list(cl=cl),
data = jags.data,
inits = list(inits1,inits2,inits3),
model=model,
n.chains = 3,
adapt=2500,
monitor=c(params),
burnin=20000,
sample=30000,
summarise=FALSE,
thin=5,
plots=FALSE
)
inits()
summary
summary<-extend.jags(jags.logit,drop.monitor=c("prediction"), summarise=TRUE)
summary
require(ggmcmc)
L.factors <- data.frame(
Parameter=paste("ranef[", seq(1:5), "]", sep=""),
Label=c("S","S0","E/S0","E","Im"))
head(L.factors)
beta_post<-ggs(jagssamples,par_labels=L.factors,family=c("ranef"))
jagssamples <- as.mcmc.list(jags.logit)
require(ggmcmc)
L.factors <- data.frame(
Parameter=paste("ranef[", seq(1:5), "]", sep=""),
Label=c("S","S0","E/S0","E","Im"))
head(L.factors)
beta_post<-ggs(jagssamples,par_labels=L.factors,family=c("ranef"))
ggs_caterpillar(beta_post)+theme_stata()+ylab("")
pdf("..//figures/ranef.pdf",width=7,height=7)
ggs_caterpillar(beta_post)+theme_stata()+ylab("")
dev.off()
pdf("..//figures/density2.pdf",width=7,height=10)
ggs_density(beta_post)+theme_stata()+ylab("")
dev.off()
params <- c("beta.0","beta.1","prediction","ranef")
inits1=list(beta.0=rnorm(1,0,0.1),beta.1=rnorm(1,0,0.1))
inits2=list(beta.0=rnorm(1,0,0.1),beta.1=rnorm(1,0,0.1))
inits3=list(beta.0=rnorm(1,0,0.1),beta.1=rnorm(1,0,0.1))
library(parallel)
cl <- makeCluster(3)
jags.logit <- run.jags(method="rjparallel", method.options=list(cl=cl),
data = jags.data,
inits = list(inits1,inits2,inits3),
model=model,
n.chains = 3,
adapt=2500,
monitor=c(params),
burnin=20000,
sample=40000,
summarise=FALSE,
thin=5,
plots=FALSE
)
jagssamples <- as.mcmc.list(jags.logit)
summary<-extend.jags(jags.logit,drop.monitor=c("prediction"), summarise=TRUE)
ranef_post<-ggs(jagssamples,par_labels=L.factors,family=c("ranef"))
pdf("..//figures/ranef.pdf",width=7,height=7)
ggs_caterpillar(ranef_post)+theme_stata()+ylab("")
dev.off()
pdf("..//figures/density2.pdf",width=7,height=10)
ggs_density(ranef_post)+theme_stata()+ylab("")
dev.off()
predtype<-summary(as.mcmc.list(jags.logit, vars="prediction"))
predtype<-predtype$quantiles
require(mlearning)
require(caret)
xtab <- table(predtype[,3], typeSne)
confusionMatrix(xtab)
predtype
xtab <- table(predtype[,4], typeSne)
confusionMatrix(xtab)
xtab <- table(predtype[,5], typeSne)
confusionMatrix(xtab)
xtab <- table(predtype[,2], typeSne)
confusionMatrix(xtab)
xtab <- table(predtype[,3], typeSne)
confusionMatrix(xtab)
summary<-extend.jags(jags.logit,drop.monitor=c("prediction"), summarise=TRUE)
summary
params <- c("beta.0","beta.1","prediction","ranef","p")
inits1=list(beta.0=rnorm(1,0,0.1),beta.1=rnorm(1,0,0.1))
inits2=list(beta.0=rnorm(1,0,0.1),beta.1=rnorm(1,0,0.1))
inits3=list(beta.0=rnorm(1,0,0.1),beta.1=rnorm(1,0,0.1))
library(parallel)
cl <- makeCluster(3)
jags.logit <- run.jags(method="rjparallel", method.options=list(cl=cl),
data = jags.data,
inits = list(inits1,inits2,inits3),
model=model,
n.chains = 3,
adapt=2500,
monitor=c(params),
burnin=20000,
sample=40000,
summarise=FALSE,
thin=5,
plots=FALSE
)
jagssamples <- as.mcmc.list(jags.logit)
jagssamples
prob<-summary(as.mcmc.list(jags.logit, vars="p"))
prob
