}   # close J loop
}  # close N loop
for(k in 1:2){
beta[k,1] <- 0          ## MUST set the first set of covariates (for the first outcome category) to 0
for(j in 2:J){
beta[k,j] ~ dnorm(0, 0.001)
}  # close J loop
}  # close K loop
}"  # close model loop
params<-c("beta","p")
inits<-function(){list(beta=structure(.Data=c(rep(NA,2),runif(2*(6-1),-1,1)),.Dim=c(2,6)))}
inits1=inits()
inits2=inits()
inits3=inits()
chain_inits<-list(inits1,inits2,inits3)
jags(data=jags.data, inits=chain_inits, params, n.chains=3, n.iter=10, n.burnin=1, model.file=model)
#  Required libraries
library(rjags)
library(ggmcmc)
library(ggplot2)
library(ggthemes)
library(pander)
library(Cairo)
library(plyr)
library(MASS)
library(scales)
library(plyr)
require(gdata)
require(runjags)
require(gdata)
data.1= read.table(file="..//data//multinomial_cat.dat",header=TRUE,na.strings = "",sep="\t")
data.1$Galtype2<-trim(data.1$Galtype2)
galtype<-match(data.1$Galtype2,c("E","E/S0","S","S0","Im"))
Ntype<-length(unique(data.1$Galtype2))
typeSne<-match(trim(data.1$SNtype),c("Ia","Ib","Ib/c","Ic","II","IIn"))
bar<-as.numeric(data.1$bar)-1
jags.data <- list(y= typeSne,
N = nrow(data.1),
#                  galtype = galtype,
bar=bar,
J=6
)
model<-"model{
for(i in 1:N){
y[i] ~ dcat(p[i, 1:J])
for (j in 1:J){
log(q[i,j]) <-  beta[1,j] +
beta[2,j]*bar[i]
p[i,j] <- q[i,j]/sum(q[i,1:J])
}   # close J loop
}  # close N loop
for(k in 1:2){
beta[k,1] <- 0          ## MUST set the first set of covariates (for the first outcome category) to 0
for(j in 2:J){
beta[k,j] ~ dnorm(0, 0.001)
}  # close J loop
}  # close K loop
}"  # close model loop
params<-c("beta","p")
inits<-function(){list(beta=structure(.Data=c(rep(NA,2),runif(2*(6-1),-1,1)),.Dim=c(2,6)))}
inits1=inits()
inits2=inits()
inits3=inits()
chain_inits<-list(inits1,inits2,inits3)
jags(data=jags.data, inits=chain_inits, params, n.chains=3, n.iter=10, n.burnin=1, model.file=model)
chain_inits
model
chain_inits
jags(data=jags.data, inits=chain_inits, params, n.chains=3, n.iter=10, n.burnin=1, model.file=model)
model<- function()  {
for(i in 1:N){
y[i] ~ dcat(p[i, 1:J])
for (j in 1:J){
log(q[i,j]) <-  beta[1,j] +
beta[2,j]*bar[i]
p[i,j] <- q[i,j]/sum(q[i,1:J])
}   # close J loop
}  # close N loop
for(k in 1:2){
beta[k,1] <- 0          ## MUST set the first set of covariates (for the first outcome category) to 0
for(j in 2:J){
beta[k,j] ~ dnorm(0, 0.001)
}  # close J loop
}  # close K loop
}"  # close model loop
model<- function()  {
for(i in 1:N){
y[i] ~ dcat(p[i, 1:J])
for (j in 1:J){
log(q[i,j]) <-  beta[1,j] +
beta[2,j]*bar[i]
p[i,j] <- q[i,j]/sum(q[i,1:J])
}   # close J loop
}  # close N loop
for(k in 1:2){
beta[k,1] <- 0          ## MUST set the first set of covariates (for the first outcome category) to 0
for(j in 2:J){
beta[k,j] ~ dnorm(0, 0.001)
}  # close J loop
}  # close K loop
}  # close model loop
model<- function()  {
for(i in 1:N){
y[i] ~ dcat(p[i, 1:J])
for (j in 1:J){
log(q[i,j]) <-  beta[1,j] +
beta[2,j]*bar[i]
p[i,j] <- q[i,j]/sum(q[i,1:J])  ## should be familiar from MLE notes: q is exp(Xb)
}   # close J loop
}  # close N loop
for(k in 1:2){
beta[k,1] <- 0          ## MUST set the first set of covariates (for the first outcome category) to 0
for(j in 2:J){
beta[k,j] ~ dnorm(0, 0.1)
}  # close J loop
}  # close K loop
}  # close model loop
<- function()  {
for(i in 1:N){
y[i] ~ dcat(p[i, 1:J])
for (j in 1:J){
log(q[i,j]) <-  b[1,j] +
b[2,j]*bar[i]
p[i,j] <- q[i,j]/sum(q[i,1:J])  ## should be familiar from MLE notes: q is exp(Xb)
}   # close J loop
#    pred[i,1] <- equals(p[i,1], max(p[i,1], p[i,2], p[i,3], p[i,4],p[i,5],p[i,6])) # "1 if p[i,1] = max(p[i,1], p[i,2], p[i,3]), 0 otherwise"
#    pred[i,2] <- equals(p[i,2], max(p[i,1], p[i,2], p[i,3], p[i,4],p[i,5],p[i,6]))
#    pred[i,3] <- equals(p[i,3], max(p[i,1], p[i,2], p[i,3], p[i,4],p[i,5],p[i,6]))
#    pred[i,4] <- equals(p[i,3], max(p[i,1], p[i,2], p[i,3], p[i,4],p[i,5],p[i,6]))
#    pred[i,5] <- equals(p[i,3], max(p[i,1], p[i,2], p[i,3], p[i,4],p[i,5],p[i,6]))
#    pred[i,6] <- equals(p[i,3], max(p[i,1], p[i,2], p[i,3], p[i,4],p[i,5],p[i,6]))
#   predcat[i] <- pred[i,1] + 2*pred[i,2] + 3*pred[i,3] + 4*pred[i,4]+
#      5*pred[i,5]+6*pred[i,6]
}  # close N loop
for(k in 1:2){
b[k,1] <- 0          ## MUST set the first set of covariates (for the first outcome category) to 0
for(j in 2:J){
b[k,j] ~ dnorm(0, 0.1)
}  # close J loop
}  # close K loop
}  # close model loop
econvote.model.jags <- function()  {
for(i in 1:N){
y[i] ~ dcat(p[i, 1:J])
for (j in 1:J){
log(q[i,j]) <-  b[1,j] +
b[2,j]*bar[i]
p[i,j] <- q[i,j]/sum(q[i,1:J])  ## should be familiar from MLE notes: q is exp(Xb)
}   # close J loop
#    pred[i,1] <- equals(p[i,1], max(p[i,1], p[i,2], p[i,3], p[i,4],p[i,5],p[i,6])) # "1 if p[i,1] = max(p[i,1], p[i,2], p[i,3]), 0 otherwise"
#    pred[i,2] <- equals(p[i,2], max(p[i,1], p[i,2], p[i,3], p[i,4],p[i,5],p[i,6]))
#    pred[i,3] <- equals(p[i,3], max(p[i,1], p[i,2], p[i,3], p[i,4],p[i,5],p[i,6]))
#    pred[i,4] <- equals(p[i,3], max(p[i,1], p[i,2], p[i,3], p[i,4],p[i,5],p[i,6]))
#    pred[i,5] <- equals(p[i,3], max(p[i,1], p[i,2], p[i,3], p[i,4],p[i,5],p[i,6]))
#    pred[i,6] <- equals(p[i,3], max(p[i,1], p[i,2], p[i,3], p[i,4],p[i,5],p[i,6]))
#   predcat[i] <- pred[i,1] + 2*pred[i,2] + 3*pred[i,3] + 4*pred[i,4]+
#      5*pred[i,5]+6*pred[i,6]
}  # close N loop
for(k in 1:2){
b[k,1] <- 0          ## MUST set the first set of covariates (for the first outcome category) to 0
for(j in 2:J){
b[k,j] ~ dnorm(0, 0.1)
}  # close J loop
}  # close K loop
}  # close model loop
model<- function(){
for(i in 1:N){
y[i] ~ dcat(p[i, 1:J])
for (j in 1:J){
log(q[i,j]) <-  beta[1,j] +
beta[2,j]*bar[i]
p[i,j] <- q[i,j]/sum(q[i,1:J])  ## should be familiar from MLE notes: q is exp(Xb)
}   # close J loop
}  # close N loop
for(k in 1:2){
beta[k,1] <- 0   ## MUST set the first set of covariates (for the first outcome category) to 0
for(j in 2:J){
beta[k,j] ~ dnorm(0, 0.1)
}  # close J loop
}  # close K loop
}  # close model loop
params<-c("beta","p")
inits<-function(){list(beta=structure(.Data=c(rep(NA,2),runif(2*(6-1),-1,1)),.Dim=c(2,6)))}
inits1=inits()
inits2=inits()
inits3=inits()
chain_inits<-list(inits1,inits2,inits3)
jags(data=jags.data, inits=chain_inits, params, n.chains=3, n.iter=10, n.burnin=1, model.file=model)
params<-c("beta")
inits<-function(){list(beta=structure(.Data=c(rep(NA,2),runif(2*(6-1),-1,1)),.Dim=c(2,6)))}
inits1=inits()
inits2=inits()
inits3=inits()
chain_inits<-list(inits1,inits2,inits3)
jags(data=jags.data, inits=chain_inits, params, n.chains=3, n.iter=10, n.burnin=1, model.file=model)
library(parallel)
cl <- makeCluster(3)
jags.mlogit <- run.jags(method="rjparallel",
data = jags.data,
inits = chain_inits,
model=model,
n.chains = 3,
adapt=1000,
monitor=c(params),
burnin=1000,
sample=5000,
summarise=FALSE,
plots=FALSE
)
model
jags.mlogit <- run.jags(method="rjparallel",
data = jags.data,
inits = chain_inits,
model=model,
n.chains = 3,
adapt=1000,
monitor=c(params),
burnin=1000,
sample=5000,
summarise=FALSE,
plots=FALSE
)
library(parallel)
cl <- makeCluster(3)
jags.mlogit <- run.jags(method="rjparallel",
data = jags.data,
inits = chain_inits,
model=model,
n.chains = 3,
adapt=1000,
monitor=c(params),
burnin=1000,
sample=5000,
summarise=FALSE,
plots=FALSE
)
model
model<- "model{
for(i in 1:N){
y[i] ~ dcat(p[i, 1:J])
for (j in 1:J){
log(q[i,j]) <-  beta[1,j] +
beta[2,j]*bar[i]
p[i,j] <- q[i,j]/sum(q[i,1:J])  ## should be familiar from MLE notes: q is exp(Xb)
}   # close J loop
}  # close N loop
for(k in 1:2){
beta[k,1] <- 0   ## MUST set the first set of covariates (for the first outcome category) to 0
for(j in 2:J){
beta[k,j] ~ dnorm(0, 0.1)
}  # close J loop
}  # close K loop
}"  # close model loop
jags.mlogit <- run.jags(method="rjparallel",
data = jags.data,
inits = chain_inits,
model=model,
n.chains = 3,
adapt=1000,
monitor=c(params),
burnin=1000,
sample=5000,
summarise=FALSE,
plots=FALSE
)
jags.mlogit<-jags(data=jags.data, inits=chain_inits, params, n.chains=3, n.iter=1000, n.burnin=1000, model.file=model)
model<- function(){
for(i in 1:N){
y[i] ~ dcat(p[i, 1:J])
for (j in 1:J){
log(q[i,j]) <-  beta[1,j] +
beta[2,j]*bar[i]
p[i,j] <- q[i,j]/sum(q[i,1:J])  ## should be familiar from MLE notes: q is exp(Xb)
}   # close J loop
}  # close N loop
for(k in 1:2){
beta[k,1] <- 0   ## MUST set the first set of covariates (for the first outcome category) to 0
for(j in 2:J){
beta[k,j] ~ dnorm(0, 0.1)
}  # close J loop
}  # close K loop
}  # close model loop
params<-c("beta")
inits<-function(){list(beta=structure(.Data=c(rep(NA,2),runif(2*(6-1),-1,1)),.Dim=c(2,6)))}
inits1=inits()
inits2=inits()
inits3=inits()
chain_inits<-list(inits1,inits2,inits3)
jags.mlogit<-jags(data=jags.data, inits=chain_inits, params, n.chains=3, n.iter=1000, n.burnin=1000, model.file=model)
jags.mlogit
jags.mlogit<-jags(data=jags.data, inits=chain_inits, params, n.chains=3, n.iter=20000, n.burnin=1000, model.file=model)
jags.mlogit
plot(jags.mlogit)
as.mcmc.list(jags.mlogit)
as.summary(jags.mlogit)
summary(jags.mlogit)
J1.upd <- update(jags.mlogit, n.iter =15000, n.thin = 10)
out
out <- J1.upd$BUGSoutput
out
plot(out)
OUT1 <- MyBUGSOutput(out, c(uNames("beta", 6)))
dbern(z)
dbern(0)
model<- function(){
for(i in 1:N){
y[i] ~ dcat(p[i, 1:J])
for (j in 1:J){
log(q[i,j]) <-  beta[1,j] +
beta[2,j]*bar[i]
p[i,j] <- q[i,j]/sum(q[i,1:J])  ## should be familiar from MLE notes: q is exp(Xb)
}   # close J loop
}  # close N loop
for(k in 1:2){
#    beta[k,1] <- 0   ## MUST set the first set of covariates (for the first outcome category) to 0
beta[k,1]~dbern(0)
for(j in 2:J){
beta[k,j] ~ dnorm(0, 0.1)
}  # close J loop
}  # close K loop
}  # close model loop
params<-c("beta","p")
library(parallel)
cl <- makeCluster(3)
jags.mlogit <- run.jags(method="rjparallel",
data = jags.data,
inits = chain_inits,
model=model,
n.chains = 3,
adapt=1000,
monitor=c(params),
burnin=1000,
sample=5000,
summarise=FALSE,
plots=FALSE
)
model<- "model{
for(i in 1:N){
y[i] ~ dcat(p[i, 1:J])
for (j in 1:J){
log(q[i,j]) <-  beta[1,j] +
beta[2,j]*bar[i]
p[i,j] <- q[i,j]/sum(q[i,1:J])  ## should be familiar from MLE notes: q is exp(Xb)
}   # close J loop
}  # close N loop
for(k in 1:2){
beta[k,1]~dbern(0)    ## MUST set the first set of covariates (for the first outcome category) to 0
for(j in 2:J){
beta[k,j] ~ dnorm(0, 0.1)
}  # close J loop
}  # close K loop
}"  # close model loop
jags.mlogit <- run.jags(method="rjparallel",
data = jags.data,
inits = chain_inits,
model=model,
n.chains = 3,
adapt=1000,
monitor=c(params),
burnin=1000,
sample=5000,
summarise=FALSE,
plots=FALSE
)
jags.mlogit
summary<-extend.jags(jags.mlogi,drop.monitor=c("p"), summarise=TRUE)
summary<-extend.jags(jags.mlogit,drop.monitor=c("p"), summarise=TRUE)
print(summary)
jagssamples <- as.mcmc.list(jags.mlogit)
beta_post<-ggs(jagssamples,family=c("beta"))
require(ggthemes)
ggs_caterpillar(beta_post)+theme_stata()+ylab("")
prob<-summary(as.mcmc.list(jags.mlogit, vars="p"))
prob<-prob$quantiles
prob
dim(pob)
dim(prob)
prob[1,3]
prob[1,4]
prob[1,5]
prob[1,6]
prob[1,0]
prob[0,1]
prob[,1]
prob[,2]
prob[,3]
prob[,4]
prob[1,1]
prob
prob[1,]
setwd("~/Dropbox/artigos/Meusartigos/IAA-WGC/Github/Logist_SNe/script")
#  Required libraries
library(rjags)
library(ggmcmc)
library(ggplot2)
library(ggthemes)
library(pander)
library(Cairo)
library(plyr)
library(MASS)
library(scales)
library(plyr)
require(gdata)
require(runjags)
require(gdata)
data.1= read.table(file="..//data//multinomial_cat.dat",header=TRUE,na.strings = "",sep="\t")
data.1$Galtype2<-trim(data.1$Galtype2)
galtype<-match(data.1$Galtype2,c("E","E/S0","S","S0","Im"))
Ntype<-length(unique(data.1$Galtype2))
typeSne<-match(trim(data.1$SNtype),c("Ia","Ib","Ib/c","Ic","II","IIn"))
bar<-as.numeric(data.1$bar)-1
jags.data <- list(y= typeSne,
N = nrow(data.1),
#                  galtype = galtype,
bar=bar,
J=6
)
model<- "model{
for(i in 1:N){
y[i] ~ dcat(p[i, 1:J])
for (j in 1:J){
log(q[i,j]) <-  beta[1,j] +
beta[2,j]*bar[i]
p[i,j] <- q[i,j]/sum(q[i,1:J])
}   # close J loop
}  # close N loop
for(k in 1:2){
beta[k,1]~dbern(0) ## MUST set the first set of covariates (for the first outcome category) to 0
for(j in 2:J){
beta[k,j] ~ dnorm(0, 0.1)
}  # close J loop
}  # close K loop
}"  # close model loop
params<-c("beta","p")
inits<-function(){list(beta=structure(.Data=c(rep(NA,2),runif(2*(6-1),-1,1)),.Dim=c(2,6)))}
inits1=inits()
inits2=inits()
inits3=inits()
chain_inits<-list(inits1,inits2,inits3)
library(parallel)
cl <- makeCluster(3)
jags.mlogit <- run.jags(method="rjparallel",
data = jags.data,
inits = chain_inits,
model=model,
n.chains = 3,
adapt=1000,
monitor=c(params),
burnin=1000,
sample=5000,
summarise=FALSE,
plots=FALSE
)
summary<-extend.jags(jags.mlogit,drop.monitor=c("p"), summarise=TRUE)
print(summary)
ggs_caterpillar(beta_post)+theme_stata()+ylab("")
jagssamples
print(summary)
jagssamples <- as.mcmc.list(jags.mlogit)
beta_post<-ggs(jagssamples,family=c("beta"))
ggs_caterpillar(beta_post)+theme_stata()+ylab("")
data.frame(
Parameter=paste("beta[", seq(1:6), "]", sep=""),
Label=c("Ia","Ib","Ib/c","Ic","II","IIn"))
seq(1:2,seq(1:6))
seq(1:6)
paste("beta[1,", seq(1:6), "]", sep="")
c(paste("beta[1,", seq(1:6), "]", sep=""),paste("beta[2,", seq(1:6), "]", sep=""))
L.factors <- data.frame(
Parameter=c(paste("beta[1,", seq(1:6), "]", sep=""),paste("beta[2,", seq(1:6), "]", sep="")),
Label=c("Ia","Ib","Ib/c","Ic","II","IIn","Ia","Ib","Ib/c","Ic","II","IIn"))
head(L.factors)
c(paste("beta[1,", seq(1:6), "]", sep=""),paste("beta[2,", seq(1:6), "]", sep=""))
c("Ia","Ib","Ib/c","Ic","II","IIn","Ia","Ib","Ib/c","Ic","II","IIn")
L.factors <- data.frame(
Parameter=c(paste("beta[1,", seq(1:6), "]", sep=""),paste("beta[2,", seq(1:6), "]", sep="")),
Label=c("Ia","Ib","Ib/c","Ic","II","IIn","Ia","Ib","Ib/c","Ic","II","IIn"))
head(L.factors)
L.factors
beta_post<-ggs(jagssamples,par_labels=L.factors,family=c("beta"))
ggs_caterpillar(beta_post)+theme_stata()+ylab("")
beta_post<-ggs(jagssamples,family=c("beta"))
ggs_caterpillar(beta_post)+theme_stata()+ylab("")
beta_post
L.factors <- data.frame(
Parameter=c(paste("beta[1,", seq(1:6), "]", sep=""),paste("beta[2,", seq(1:6), "]", sep="")),
Label=c(expression(beta[0]^{"Ia"}),expression(beta[0]^{"Ib"}),
expression(beta[0]^{"Ib/c"}),expression(beta[0]^{"Ic"}),expression(beta[0]^{"II"}),
expression(beta[0]^{"IIn"}),expression(beta[1]^{"Ia"}),expression(beta[1]^{"Ib"}),
expression(beta[1]^{"Ib/c"}),expression(beta[1]^{"Ic"}),expression(beta[1]^{"II"}),
expression(beta[1]^{"IIn"})))
L.factors <- data.frame(
Parameter=c(paste("beta[1,", seq(1:6), "]", sep=""),paste("beta[2,", seq(1:6), "]", sep="")),
Label=c("beta.0 Ia","beta.0 Ib","beta.0 Ib/c","beta.0 Ic","beta.0 II",
"beta.0 IIn","beta.0 Ia","beta.0 Ib","beta.0 Ib/c","beta.0 Ic","beta.0 II",
"beta.0 IIn"))
L.factors
beta_post<-ggs(jagssamples,par_labels=L.factors,family=c("beta"))
ggs_caterpillar(beta_post)+theme_stata()+ylab("")
L.factors <- data.frame(
Parameter=c(paste("beta[1,", seq(1:6), "]", sep=""),paste("beta[2,", seq(1:6), "]", sep="")),
Label=c("beta.0 Ia","beta.0 Ib","beta.0 Ib/c","beta.0 Ic","beta.0 II",
"beta.0 IIn","beta.1 Ia","beta.1 Ib","beta.1 Ib/c","beta.1 Ic","beta.1 II",
"beta.1 IIn"))
#head(L.factors)
beta_post<-ggs(jagssamples,par_labels=L.factors,family=c("beta"))
ggs_caterpillar(beta_post)+theme_stata()+ylab("")
pdf("..//figures/multi_beta.pdf",width=8,height=10)
ggs_caterpillar(beta_post)+theme_stata()+ylab("")
dev.off()
data.1$SNtype
summary(data.1$SNtype)
