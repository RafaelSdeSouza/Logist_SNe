<<<<<<< Updated upstream
corr<-Corr_MIC(M1,"pearson")
Fig1<-plotdendrogram(corr,"fan")
N = 5000
M= 500
M1<-matrix(rnorm(N*M,mean=0,sd=1), N, M)
corr<-Corr_MIC(M1,"pearson")
Fig1<-plotdendrogram(corr,"fan")
N = 5000
M= 100
M1<-matrix(rnorm(N*M,mean=0,sd=1), N, M)
corr<-Corr_MIC(M1,"pearson")
Fig1<-plotdendrogram(corr,"fan")
N = 50000
M= 100
M1<-matrix(rnorm(N*M,mean=0,sd=1), N, M)
corr<-Corr_MIC(M1,"pearson")
Fig1<-plotdendrogram(corr,"fan")
N = 100000
M= 100
M1<-matrix(rnorm(N*M,mean=0,sd=1), N, M)
corr<-Corr_MIC(M1,"pearson")
Fig1<-plotdendrogram(corr,"fan")
ptm <- proc.time()
corr<-Corr_MIC(M1,"pearson")
Fig1<-plotdendrogram(corr,"fan")
proc.time() - ptm
1.432+0.044
help(package="AMADA")
install.packages("GGally")
library("GGally", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
data(diamonds, package="ggplot2")
diamonds.samp <- diamonds[sample(1:dim(diamonds)[1],200),]
# Custom Example
pm <- ggpairs(
diamonds.samp[,1:3],
upper = list(continuous = "density", combo = "box"),
lower = list(continuous = "points", combo = "dot"),
color = "cut",
title = "Diamonds"
)
pm
pm <- ggpairs(
diamonds.samp[,1:3],
upper = list(continuous = "density", combo = "box"),
lower = list(continuous = "density", combo = "dot"),
color = "cut",
title = "Diamonds"
)
pm
ggpairs(
diamonds.samp[,1:3],
upper = list(continuous = "density", combo = "box"),
lower = list(continuous = "density"),
color = "cut",
title = "Diamonds"
)
ggpairs(
diamonds.samp[,1:3],
upper = list(continuous = "density"),
lower = list(continuous = "density"),
color = "cut",
title = "Diamonds"
)
ggpairs(
iris[,1:4],
upper = list(continuous = "density"),
lower = list(continuous = "density"),
color = "cut",
title = "Diamonds"
)
ggpairs(
iris[,1:4],
upper = list(continuous = "density"),
lower = list(continuous = "density")
)
ggpairs(
iris[,1:4],
upper = list(continuous = "cor"),
lower = list(continuous = "density")
)
pm <- ggpairs(
iris[,1:4],
upper = list(continuous = "cor"),
lower = list(continuous = "density"),
diag=list("density")
)
pm
ggpairs(
iris[,1:4],
upper = list(continuous = "cor"),
lower = list(continuous = "density"),
diag=list("bar'")
)
pm <- ggpairs(
iris[,1:4],
diag=list("bar"),
upper = list(continuous = "cor"),
lower = list(continuous = "density")
)
pm
pm <- ggpairs(
iris[,1:4],
diag=list("bar"),
upper = list(continuous = "cor"),
lower = list(continuous = "hist")
)
pm
pm <- ggpairs(
iris[,1:4],
diag=list("continuous"),
upper = list(continuous = "cor"),
lower = list(continuous = "density")
)
pm
iris
require(ggplot2)
p1 <- ggplot(iris,aes(x=Sepal.Length,y=Sepal.Width))
#cairo_ps("Density_z.eps")
#p1+stat_density2d(geom="tile", aes(fill =..density..),na.rm = TRUE,n = 250,contour = FALSE) +
# coord_cartesian(c(0.05, 1), c(0.05, 1))+ scale_y_log10()+ scale_x_log10()+xlab(expression(z[spec]))+ylab(expression(z[phot]))
#dev.off()
#p1+stat_density2d(geom="tile", aes(fill =..density..),na.rm = TRUE,n = 250,contour = FALSE) +
# coord_cartesian(c(0.05, 1), c(0.05, 1))+xlab(expression(z[spec]))+ylab(expression(z[phot]))+
#scale_fill_gradient(low = "blue", high = "red")+geom_abline(intercept = 0)
#p1+stat_density2d(bins=100,geom="polygon", aes(fill =..level..),na.rm = TRUE,n = 250,contour = TRUE) +
# coord_cartesian(c(0.05, 1), c(0.05, 1))+xlab(expression(z[spec]))+ylab(expression(z[phot]))+
#scale_fill_gradient(low = "blue",high = "red")+geom_abline(intercept = 0)+theme(text = element_text(size=20),panel.background = element_blank(),axis.line = element_line(color = 'black'))
k1<-p1+stat_density2d(bins=200,geom="polygon", aes(fill =..level..),na.rm = TRUE,n = 250,contour = TRUE)
k1
p1 <- ggplot(iris,aes(x=Sepal.Length,y=Sepal.Length+rnorm(1,0,0.5)))
#cairo_ps("Density_z.eps")
#p1+stat_density2d(geom="tile", aes(fill =..density..),na.rm = TRUE,n = 250,contour = FALSE) +
# coord_cartesian(c(0.05, 1), c(0.05, 1))+ scale_y_log10()+ scale_x_log10()+xlab(expression(z[spec]))+ylab(expression(z[phot]))
#dev.off()
#p1+stat_density2d(geom="tile", aes(fill =..density..),na.rm = TRUE,n = 250,contour = FALSE) +
# coord_cartesian(c(0.05, 1), c(0.05, 1))+xlab(expression(z[spec]))+ylab(expression(z[phot]))+
#scale_fill_gradient(low = "blue", high = "red")+geom_abline(intercept = 0)
#p1+stat_density2d(bins=100,geom="polygon", aes(fill =..level..),na.rm = TRUE,n = 250,contour = TRUE) +
# coord_cartesian(c(0.05, 1), c(0.05, 1))+xlab(expression(z[spec]))+ylab(expression(z[phot]))+
#scale_fill_gradient(low = "blue",high = "red")+geom_abline(intercept = 0)+theme(text = element_text(size=20),panel.background = element_blank(),axis.line = element_line(color = 'black'))
k1<-p1+stat_density2d(bins=200,geom="polygon", aes(fill =..level..),na.rm = TRUE,n = 250,contour = TRUE)
k1
p1 <- ggplot(iris,aes(x=Sepal.Length,y=Sepal.Length+rnorm(1,0,0.1)))
#cairo_ps("Density_z.eps")
#p1+stat_density2d(geom="tile", aes(fill =..density..),na.rm = TRUE,n = 250,contour = FALSE) +
# coord_cartesian(c(0.05, 1), c(0.05, 1))+ scale_y_log10()+ scale_x_log10()+xlab(expression(z[spec]))+ylab(expression(z[phot]))
#dev.off()
#p1+stat_density2d(geom="tile", aes(fill =..density..),na.rm = TRUE,n = 250,contour = FALSE) +
# coord_cartesian(c(0.05, 1), c(0.05, 1))+xlab(expression(z[spec]))+ylab(expression(z[phot]))+
#scale_fill_gradient(low = "blue", high = "red")+geom_abline(intercept = 0)
#p1+stat_density2d(bins=100,geom="polygon", aes(fill =..level..),na.rm = TRUE,n = 250,contour = TRUE) +
# coord_cartesian(c(0.05, 1), c(0.05, 1))+xlab(expression(z[spec]))+ylab(expression(z[phot]))+
#scale_fill_gradient(low = "blue",high = "red")+geom_abline(intercept = 0)+theme(text = element_text(size=20),panel.background = element_blank(),axis.line = element_line(color = 'black'))
k1<-p1+stat_density2d(bins=200,geom="polygon", aes(fill =..level..),na.rm = TRUE,n = 250,contour = TRUE)
k1
p1+stat_density2d(bins=200,geom="polygon", aes(fill =..level..),na.rm = TRUE,n = 250,contour = TRUE) +
scale_fill_gradient2(breaks=c(0.1,1,5,25),labels=c("0.1","1", "5", "25"),trans="log",low = rgb(191/255, 211/255, 230/255),mid=rgb(158/255, 188/255, 218/255),high = rgb(129/255, 15/255, 124/255),space = "rgb")+
geom_abline(intercept = 0)+theme(legend.text = element_text(colour="gray40"),legend.title=element_blank(),text = element_text(size=20),legend.position=c(0.1,0.75),axis.line = element_line(color = 'black'))+
xlim(0.01,1)+ylim(0.01,1)+geom_density2d(colour="black",alpha=0.3, breaks = c(1, 5,10,25,50,100,200,250
))
p1+stat_density2d(bins=200,geom="polygon", aes(fill =..level..),na.rm = TRUE,n = 250,contour = TRUE) +
scale_fill_gradient2(breaks=c(0.1,1,5,25),labels=c("0.1","1", "5", "25"),trans="log",low = rgb(191/255, 211/255, 230/255),mid=rgb(158/255, 188/255, 218/255),high = rgb(129/255, 15/255, 124/255),space = "rgb")+
geom_abline(intercept = 0)+theme(legend.text = element_text(colour="gray40"),legend.title=element_blank(),text = element_text(size=20),legend.position=c(0.1,0.75),axis.line = element_line(color = 'black'))+
xlim(0.01,1)+ylim(0.01,1)
p1+stat_density2d(bins=200,geom="polygon", aes(fill =..level..),na.rm = TRUE,n = 250,contour = TRUE) +
scale_fill_gradient2(breaks=c(0.1,1,5,25),labels=c("0.1","1", "5", "25"),trans="log",low = rgb(191/255, 211/255, 230/255),mid=rgb(158/255, 188/255, 218/255),high = rgb(129/255, 15/255, 124/255),space = "rgb")+
geom_abline(intercept = 0)+theme(legend.text = element_text(colour="gray40"),legend.title=element_blank(),text = element_text(size=20),legend.position=c(0.1,0.75),axis.line = element_line(color = 'black'))
p1 <- ggplot(iris,aes(x=Sepal.Length,y=Sepal.Length+rnorm(1,0,0.01)))
#cairo_ps("Density_z.eps")
#p1+stat_density2d(geom="tile", aes(fill =..density..),na.rm = TRUE,n = 250,contour = FALSE) +
# coord_cartesian(c(0.05, 1), c(0.05, 1))+ scale_y_log10()+ scale_x_log10()+xlab(expression(z[spec]))+ylab(expression(z[phot]))
#dev.off()
#p1+stat_density2d(geom="tile", aes(fill =..density..),na.rm = TRUE,n = 250,contour = FALSE) +
# coord_cartesian(c(0.05, 1), c(0.05, 1))+xlab(expression(z[spec]))+ylab(expression(z[phot]))+
#scale_fill_gradient(low = "blue", high = "red")+geom_abline(intercept = 0)
#p1+stat_density2d(bins=100,geom="polygon", aes(fill =..level..),na.rm = TRUE,n = 250,contour = TRUE) +
# coord_cartesian(c(0.05, 1), c(0.05, 1))+xlab(expression(z[spec]))+ylab(expression(z[phot]))+
#scale_fill_gradient(low = "blue",high = "red")+geom_abline(intercept = 0)+theme(text = element_text(size=20),panel.background = element_blank(),axis.line = element_line(color = 'black'))
k1<-p1+stat_density2d(bins=200,geom="polygon", aes(fill =..level..),na.rm = TRUE,n = 250,contour = TRUE) +
scale_fill_gradient2(breaks=c(0.1,1,5,25),labels=c("0.1","1", "5", "25"),trans="log",low = rgb(191/255, 211/255, 230/255),mid=rgb(158/255, 188/255, 218/255),high = rgb(129/255, 15/255, 124/255),space = "rgb")+
geom_abline(intercept = 0)+theme(legend.text = element_text(colour="gray40"),legend.title=element_blank(),text = element_text(size=20),legend.position=c(0.1,0.75),axis.line = element_line(color = 'black'))
k1
p1+stat_density2d(geom="polygon", aes(fill =..level..),na.rm = TRUE,contour = TRUE) +
scale_fill_gradient2(breaks=c(0.1,1,5,25),labels=c("0.1","1", "5", "25"),trans="log",low = rgb(191/255, 211/255, 230/255),mid=rgb(158/255, 188/255, 218/255),high = rgb(129/255, 15/255, 124/255),space = "rgb")+
geom_abline(intercept = 0)+theme(legend.text = element_text(colour="gray40"),legend.title=element_blank(),text = element_text(size=20),legend.position=c(0.1,0.75),axis.line = element_line(color = 'black'))
require(ggplot2)
p1 <- ggplot(iris,aes(x=Sepal.Length,y=Sepal.Length+rnorm(1,0,0.01)))
p1+stat_density2d(geom="polygon", aes(fill =..level..),na.rm = TRUE,contour = TRUE) +
scale_fill_gradient2(breaks=c(0.1,1,5,25),labels=c("0.1","1", "5", "25"),trans="log",low = rgb(191/255, 211/255, 230/255),mid=rgb(158/255, 188/255, 218/255),high = rgb(129/255, 15/255, 124/255),space = "rgb")+
geom_abline(intercept = 0)+theme(legend.text = element_text(colour="gray40"),legend.title=element_blank(),text = element_text(size=20),legend.position=c(0.1,0.75),axis.line = element_line(color = 'black'))
p1+stat_density2d(geom="polygon", aes(fill =..level..),na.rm = TRUE,contour = TRUE) +
scale_fill_gradient2(trans="log",low = rgb(191/255, 211/255, 230/255),mid=rgb(158/255, 188/255, 218/255),high = rgb(129/255, 15/255, 124/255),space = "rgb")+
geom_abline(intercept = 0)+theme(legend.text = element_text(colour="gray40"),legend.title=element_blank(),text = element_text(size=20),legend.position=c(0.1,0.75),axis.line = element_line(color = 'black'))
p1+stat_density2d(geom="polygon", aes(fill =..level..),na.rm = TRUE,contour = TRUE) +
scale_fill_gradient2(low = rgb(191/255, 211/255, 230/255),mid=rgb(158/255, 188/255, 218/255),high = rgb(129/255, 15/255, 124/255),space = "rgb")+
geom_abline(intercept = 0)+theme(legend.text = element_text(colour="gray40"),legend.title=element_blank(),text = element_text(size=20),legend.position=c(0.1,0.75),axis.line = element_line(color = 'black'))
p1+stat_density2d(geom="tile", aes(fill =..level..),na.rm = TRUE,contour = TRUE) +
scale_fill_gradient2(low = rgb(191/255, 211/255, 230/255),mid=rgb(158/255, 188/255, 218/255),high = rgb(129/255, 15/255, 124/255),space = "rgb")+
geom_abline(intercept = 0)+theme(legend.text = element_text(colour="gray40"),legend.title=element_blank(),text = element_text(size=20),legend.position=c(0.1,0.75),axis.line = element_line(color = 'black'))
p1+stat_density2d( aes(fill =..level..),na.rm = TRUE,contour = TRUE) +
scale_fill_gradient2(low = rgb(191/255, 211/255, 230/255),mid=rgb(158/255, 188/255, 218/255),high = rgb(129/255, 15/255, 124/255),space = "rgb")+
geom_abline(intercept = 0)+theme(legend.text = element_text(colour="gray40"),legend.title=element_blank(),text = element_text(size=20),legend.position=c(0.1,0.75),axis.line = element_line(color = 'black'))
setwd("~/Dropbox/artigos/Meusartigos/IAA-WGC/Github/Logist_SNe/script")
# Script to prepare data set for logit analysis
require(MASS)
#Read dataset
data.0= read.fwf(file="..//data//snsdss.dat",width = c(7,1, 11, 9, 1,9,1,8,2,1,
11,1,1,26,2,14,10,9,10,1,
1,1,2,6,5,5,6,6,6,7,7))
# Select few variables for test. For now, galaxy morphology and SN type
SN_cat<-data.frame(SNtype=data.0[,11],Galtype=data.0[,19],mag_g=data.0[,29], bar=data.0[,23])
SN_cat2<-na.omit(SN_cat)
require(gdata)
SN_cat2$SNtype<-trim(SN_cat2$SNtype)
install.packages("gdata")
require(MASS)
require(gdata)
data.0= read.fwf(file="..//data//snsdss.dat",width = c(7,1, 11, 9, 1,9,1,8,2,1,
11,1,1,26,2,14,10,9,10,1,
1,1,2,6,5,5,6,6,6,7,7))
# Select few variables for test. For now, galaxy morphology and SN type
SN_cat<-data.frame(SNtype=data.0[,11],Galtype=data.0[,19],mag_g=data.0[,29], bar=data.0[,23])
SN_cat2<-na.omit(SN_cat)
require(gdata)
SN_cat2$SNtype<-trim(SN_cat2$SNtype)
SN_cat2$SNtype
SN_cat3<-SN_cat2[which(SN_cat2$SNtype=="Ia"|SN_cat2$SNtype=="II"|SN_cat2$SNtype=="IIn"|
SN_cat2$SNtype=="Ib"|SN_cat2$SNtype=="Ib/c"|SN_cat2$SNtype=="Ic"),]
SN_cat3$SNtype<-droplevels(SN_cat3$SNtype)
SN_cat3$SNtype
SN_cat3$Galtype<-trim(SN_cat3$Galtype)
SN_cat3$Galtype2<-revalue(SN_cat3$Galtype, c("E pec" ="E", "E/S0 pec"="E/S0","S pec"="S","S0 pec"="S0",
"S0/a"="S0","S0/a pec"="S0","Sa"="S","Sa pec"="S","Sab"="S","Sab pec"="S","Sb"="S","Sb pec"="S",
"Sbc"="S","Sbc pec"="S","Sc"="S","Sc pec"="S","Scd"="S",
"Scd pec"="S","Sd"="S",
"Sd pec"="S","Sdm"="S","Sdm pec"="S","Sm"="S"))
require(plyr)
SN_cat3$Galtype2<-revalue(SN_cat3$Galtype, c("E pec" ="E", "E/S0 pec"="E/S0","S pec"="S","S0 pec"="S0",
"S0/a"="S0","S0/a pec"="S0","Sa"="S","Sa pec"="S","Sab"="S","Sab pec"="S","Sb"="S","Sb pec"="S",
"Sbc"="S","Sbc pec"="S","Sc"="S","Sc pec"="S","Scd"="S",
"Scd pec"="S","Sd"="S",
"Sd pec"="S","Sdm"="S","Sdm pec"="S","Sm"="S"))
SN_cat4<-SN_cat3[which(SN_cat3$Galtype2=="E"|SN_cat3$Galtype2=="E/S0"|SN_cat3$Galtype2=="Im"|
SN_cat3$Galtype2=="S"|SN_cat3$Galtype2=="S0"),]
SN_cat4$Galtype2<-droplevels(SN_cat4$Galtype2)
SN_cat4
write.matrix(SN_cat4[,-2],"..//data/multinomial_cat.dat",sep = "\t")
levels(data.1$SNtype)
data.1= read.table(file="..//data//multinomial_cat.dat",header=TRUE,na.strings = "",sep="\t")
data.1$Galtype2<-trim(data.1$Galtype2)
data.1$SNtype
levels(data.1$SNtype)
match(trim(data.1$SNtype),c("Ia","Ib","Ib/c","Ic","II","IIn"))
typeSne<-match(trim(data.1$SNtype),c("Ia","Ib","Ib/c","Ic","II","IIn"))-1
typeSne
galtype<-match(data.1$Galtype2,c("E","E/S0","S","S0","Im"))
Ntype<-length(unique(data.1$Galtype2))
typeSne<-match(trim(data.1$SNtype),c("Ia","Ib","Ib/c","Ic","II","IIn"))-1
bar<-as.numeric(data.1$bar)-1
list(Y= typeSne,
N = nrow(data.1),
mag_g = data.1$mag_g,
galtype = galtype,
bar=bar,
Ntype=Ntype
)
model<-"{
## priors
tau.R<-pow(sdBeta,-1)
sdBeta ~ dgamma(0.001,0.001)
# Random intercept
for (j in 1:Ntype){
ranef[j]~ddexp(0,tau.R)
}
for (k in 2:Ntype){
## prior for coefficients
for( j in 1:2){
beta[j,k]~dnorm(0,1e6)
}
}
## Likelihood
for(i in 1:N)
Y~dcat(p[i,1:Ntype])
for(k in 1:Ntype){
z[i,k]<-beta[1,k]+ranef[galtype[i]]
expz[i,k]<-exp(z[i,k])
p[i,k]<-expz[i,k]/sum(expz[i,1:Ntype])
}
for(j in 1:2)
{
beta[j,1]<-0
=======
}
## prior for coefficients
beta.0~dnorm(0,1e-6)
## Likelihood
for(i in 1:N){
for(k in 1:Ntype){
z[i,k]<-beta.0+ranef[galtype[i]]
expz[i,k]<-exp(z[i,k])
p[i,k]<-expz[i,k]/sum(expz[i,1:Ntype])
}
Y[i]~dcat(p[i,1:Ntype])
>>>>>>> Stashed changes
}
}"
params <- c("beta","ranef","p")
inits1=list(beta.0=rnorm(1,0,1),beta.1=rnorm(1,0,1),beta.2=rnorm(1,0,1))
inits2=list(beta.0=rnorm(1,0,1),beta.1=rnorm(1,0,1),beta.2=rnorm(1,0,1))
inits3=list(beta.0=rnorm(1,0,1),beta.1=rnorm(1,0,1),beta.2=rnorm(1,0,1))
library(parallel)
cl <- makeCluster(3)
jags.mlogit <- run.jags(method="rjparallel",
data = jags.data,
#                      inits = list(inits1,inits2,inits3),
model=model,
n.chains = 3,
adapt=2500,
monitor=c(params),
burnin=20000,
sample=40000,
summarise=FALSE,
plots=FALSE
)
<<<<<<< Updated upstream
library(rjags)
library(ggmcmc)
library(ggplot2)
library(ggthemes)
library(pander)
library(Cairo)
library(plyr)
library(MASS)
library(scales)
library(plyr)
require(gdata)
require(runjags)
require(gdata)
=======
model<-"{
## priors
tau.R<-pow(sdBeta,-1)
sdBeta ~ dgamma(0.001,0.001)
# Random intercept
for (k in 1:Ntype){
ranef[k]~ddexp(0,tau.R)
}
## prior for coefficients
for(j in 1:Ntype){
beta[1,k]<-0
}
for(j in 2:Ntype){
beta[j,1:Ntype]~dmnorm(0,1e-6)
}
## Likelihood
for(i in 1:N){
for(j in 1:Ntype){
z[i,j]<-beta[j,1]+ranef[galtype[i]]
expz[i,j]<-exp(z[i,j])
p[i,j]<-expz[i,j]/sum(expz[i,1:Ntype])
}
Y[i]~dcat(p[i,1:Ntype])
}
}"
params <- c("beta","ranef","p")
inits1=list(beta.0=rnorm(1,0,1),beta.1=rnorm(1,0,1),beta.2=rnorm(1,0,1))
inits2=list(beta.0=rnorm(1,0,1),beta.1=rnorm(1,0,1),beta.2=rnorm(1,0,1))
inits3=list(beta.0=rnorm(1,0,1),beta.1=rnorm(1,0,1),beta.2=rnorm(1,0,1))
>>>>>>> Stashed changes
library(parallel)
cl <- makeCluster(3)
jags.mlogit <- run.jags(method="rjparallel",
data = jags.data,
#                      inits = list(inits1,inits2,inits3),
model=model,
n.chains = 3,
adapt=2500,
monitor=c(params),
burnin=20000,
sample=40000,
summarise=FALSE,
plots=FALSE
)
<<<<<<< Updated upstream
=======
model<-"{
## priors
#tau.R<-pow(sdBeta,-1)
#sdBeta ~ dgamma(0.001,0.001)
# Random intercept
#for (k in 1:Ntype){
#ranef[k]~ddexp(0,tau.R)
#}
## prior for coefficients
for(j in 1:Ntype){
beta[1,k]<-0
}
for(j in 2:Ntype){
beta[j,1:Ntype]~dmnorm(0,1e-6)
}
## Likelihood
for(i in 1:N){
for(j in 1:Ntype){
#z[i,j]<-beta[j,1]+ranef[galtype[i]]
z[i,j]<-beta[j,1]
expz[i,j]<-exp(z[i,j])
p[i,j]<-expz[i,j]/sum(expz[i,1:Ntype])
}
Y[i]~dcat(p[i,1:Ntype])
}
}"
jags.mlogit <- run.jags(method="rjparallel",
data = jags.data,
#                      inits = list(inits1,inits2,inits3),
model=model,
n.chains = 3,
adapt=2500,
monitor=c(params),
burnin=20000,
sample=40000,
summarise=FALSE,
plots=FALSE
)
model<-"model{
## priors
#tau.R<-pow(sdBeta,-1)
#sdBeta ~ dgamma(0.001,0.001)
# Random intercept
#for (k in 1:Ntype){
#ranef[k]~ddexp(0,tau.R)
#}
## prior for coefficients
for(j in 1:Ntype){
beta[1,k]<-0
}
for(j in 2:Ntype){
beta[j,1:Ntype]~dmnorm(0,1e-6)
}
## Likelihood
for(i in 1:N){
for(j in 1:Ntype){
#z[i,j]<-beta[j,1]+ranef[galtype[i]]
z[i,j]<-beta[j,1]
expz[i,j]<-exp(z[i,j])
p[i,j]<-expz[i,j]/sum(expz[i,1:Ntype])
}
Y[i]~dcat(p[i,1:Ntype])
}
}"
jags.mlogit <- run.jags(method="rjparallel",
data = jags.data,
#                      inits = list(inits1,inits2,inits3),
model=model,
n.chains = 3,
adapt=2500,
monitor=c(params),
burnin=20000,
sample=40000,
summarise=FALSE,
plots=FALSE
)
model<-"model{
## priors
#tau.R<-pow(sdBeta,-1)
#sdBeta ~ dgamma(0.001,0.001)
# Random intercept
#for (k in 1:Ntype){
#ranef[k]~ddexp(0,tau.R)
#}
## prior for coefficients
for(k in 1:Ntype){
beta[1,k]<-0
}
for(j in 2:Ntype){
beta[j,1:Ntype]~dmnorm(0,1e-6)
}
## Likelihood
for(i in 1:N){
for(j in 1:Ntype){
#z[i,j]<-beta[j,1]+ranef[galtype[i]]
z[i,j]<-beta[j,1]
expz[i,j]<-exp(z[i,j])
p[i,j]<-expz[i,j]/sum(expz[i,1:Ntype])
}
Y[i]~dcat(p[i,1:Ntype])
}
}"
jags.mlogit <- run.jags(method="rjparallel",
data = jags.data,
#                      inits = list(inits1,inits2,inits3),
model=model,
n.chains = 3,
adapt=2500,
monitor=c(params),
burnin=20000,
sample=40000,
summarise=FALSE,
plots=FALSE
)
jags.data <- list(Y= typeSne,
N = nrow(data.1),
mag_g = data.1$mag_g,
galtype = galtype,
bar=bar,
Ntype=Ntype,
b0 = rep(0, Ntype),
B0 = diag(0.00001, Ntype)
)
model<-"model{
## priors
#tau.R<-pow(sdBeta,-1)
#sdBeta ~ dgamma(0.001,0.001)
# Random intercept
#for (k in 1:Ntype){
#ranef[k]~ddexp(0,tau.R)
#}
## prior for coefficients
for(k in 1:Ntype){
beta[1,k]<-0
}
for(j in 2:Ntype){
beta[j,1:Ntype]~dmnorm(b0[], B0[,])
}
## Likelihood
for(i in 1:N){
for(j in 1:Ntype){
#z[i,j]<-beta[j,1]+ranef[galtype[i]]
z[i,j]<-beta[j,1]
expz[i,j]<-exp(z[i,j])
p[i,j]<-expz[i,j]/sum(expz[i,1:Ntype])
}
Y[i]~dcat(p[i,1:Ntype])
}
}"
jags.mlogit <- run.jags(method="rjparallel",
data = jags.data,
#                      inits = list(inits1,inits2,inits3),
model=model,
n.chains = 3,
adapt=2500,
monitor=c(params),
burnin=20000,
sample=40000,
summarise=FALSE,
plots=FALSE
)
Ntype
length(unique(data.1$Galtype2))
model<-"model{
## priors
#tau.R<-pow(sdBeta,-1)
#sdBeta ~ dgamma(0.001,0.001)
# Random intercept
#for (k in 1:Ntype){
#ranef[k]~ddexp(0,tau.R)
#}
## prior for coefficients
for(k in 1:2){
beta[1,k]<-0
}
for(j in 2:6){
beta[j,1:2]~dmnorm(b0[], B0[,])
}
## Likelihood
for(i in 1:N){
for(j in 1:Ntype){
#z[i,j]<-beta[j,1]+ranef[galtype[i]]
z[i,j]<-beta[j,1]
expz[i,j]<-exp(z[i,j])
p[i,j]<-expz[i,j]/sum(expz[i,1:Ntype])
}
Y[i]~dcat(p[i,1:6])
}
}"
jags.data <- list(Y= typeSne,
N = nrow(data.1),
mag_g = data.1$mag_g,
galtype = galtype,
bar=bar,
Ntype=Ntype,
b0 = rep(0, 2),
B0 = diag(0.00001, 2)
)
model<-"model{
## priors
#tau.R<-pow(sdBeta,-1)
#sdBeta ~ dgamma(0.001,0.001)
# Random intercept
#for (k in 1:Ntype){
#ranef[k]~ddexp(0,tau.R)
#}
## prior for coefficients
for(k in 1:2){
beta[1,k]<-0
}
for(j in 2:6){
beta[j,1:2]~dmnorm(b0[], B0[,])
}
## Likelihood
for(i in 1:N){
for(j in 1:Ntype){
#z[i,j]<-beta[j,1]+ranef[galtype[i]]
z[i,j]<-beta[j,1]
expz[i,j]<-exp(z[i,j])
p[i,j]<-expz[i,j]/sum(expz[i,1:Ntype])
}
Y[i]~dcat(p[i,1:6])
}
}"
jags.mlogit <- run.jags(method="rjparallel",
data = jags.data,
#                      inits = list(inits1,inits2,inits3),
model=model,
n.chains = 3,
adapt=2500,
monitor=c(params),
burnin=20000,
sample=40000,
summarise=FALSE,
plots=FALSE
)
model<-"model{
## priors
#tau.R<-pow(sdBeta,-1)
#sdBeta ~ dgamma(0.001,0.001)
# Random intercept
#for (k in 1:Ntype){
#ranef[k]~ddexp(0,tau.R)
#}
## prior for coefficients
for(k in 1:2){
beta[1,k]<-0
}
for(j in 2:6){
beta[j,1:2]~dmnorm(b0[], B0[,])
}
## Likelihood
for(i in 1:N){
for(j in 1:6){
#z[i,j]<-beta[j,1]+ranef[galtype[i]]
z[i,j]<-beta[j,1]
expz[i,j]<-exp(z[i,j])
p[i,j]<-expz[i,j]/sum(expz[i,1:Ntype])
}
Y[i]~dcat(p[i,1:6])
}
}"
jags.mlogit <- run.jags(method="rjparallel",
data = jags.data,
#                      inits = list(inits1,inits2,inits3),
model=model,
n.chains = 3,
adapt=2500,
monitor=c(params),
burnin=20000,
sample=40000,
summarise=FALSE,
plots=FALSE
)
typeSne
typeSne<-match(trim(data.1$SNtype),c("Ia","Ib","Ib/c","Ic","II","IIn"))
>>>>>>> Stashed changes
jags.data <- list(Y= typeSne,
N = nrow(data.1),
mag_g = data.1$mag_g,
galtype = galtype,
bar=bar,
<<<<<<< Updated upstream
Ntype=Ntype
)
library(parallel)
cl <- makeCluster(3)
=======
Ntype=Ntype,
b0 = rep(0, 2),
B0 = diag(0.00001, 2)
)
model<-"model{
## priors
#tau.R<-pow(sdBeta,-1)
#sdBeta ~ dgamma(0.001,0.001)
# Random intercept
#for (k in 1:Ntype){
#ranef[k]~ddexp(0,tau.R)
#}
## prior for coefficients
for(k in 1:2){
beta[1,k]<-0
}
for(j in 2:6){
beta[j,1:2]~dmnorm(b0[], B0[,])
}
## Likelihood
for(i in 1:N){
for(j in 1:6){
#z[i,j]<-beta[j,1]+ranef[galtype[i]]
z[i,j]<-beta[j,1]
expz[i,j]<-exp(z[i,j])
p[i,j]<-expz[i,j]/sum(expz[i,1:Ntype])
}
Y[i]~dcat(p[i,1:6])
}
}"
jags.mlogit <- run.jags(method="rjparallel",
data = jags.data,
#                      inits = list(inits1,inits2,inits3),
model=model,
n.chains = 3,
adapt=2500,
monitor=c(params),
burnin=20000,
sample=40000,
summarise=FALSE,
plots=FALSE
)
model<-"model{
## priors
#tau.R<-pow(sdBeta,-1)
#sdBeta ~ dgamma(0.001,0.001)
# Random intercept
#for (k in 1:Ntype){
#ranef[k]~ddexp(0,tau.R)
#}
## prior for coefficients
for(k in 1:2){
beta[1,k]<-0
}
for(j in 2:6){
beta[j,1:2]~dnorm(0, 1e-5)
}
## Likelihood
for(i in 1:N){
for(j in 1:6){
#z[i,j]<-beta[j,1]+ranef[galtype[i]]
z[i,j]<-beta[j,1]
expz[i,j]<-exp(z[i,j])
p[i,j]<-expz[i,j]/sum(expz[i,1:Ntype])
}
Y[i]~dcat(p[i,1:6])
}
}"
jags.mlogit <- run.jags(method="rjparallel",
data = jags.data,
#                      inits = list(inits1,inits2,inits3),
model=model,
n.chains = 3,
adapt=2500,
monitor=c(params),
burnin=20000,
sample=40000,
summarise=FALSE,
plots=FALSE
)
model<-"model{
## priors
#tau.R<-pow(sdBeta,-1)
#sdBeta ~ dgamma(0.001,0.001)
# Random intercept
#for (k in 1:Ntype){
#ranef[k]~ddexp(0,tau.R)
#}
## prior for coefficients
for(k in 1:2){
beta[1,k]<-0
}
for(j in 2:6){
beta[j,1:2]~dnorm(0, 1e-5)
}
## Likelihood
for(i in 1:N){
for(j in 1:6){
#z[i,j]<-beta[j,1]+ranef[galtype[i]]
z[i,j]<-beta[j,1]+beta[j,2]*bar[i]
expz[i,j]<-exp(z[i,j])
p[i,j]<-expz[i,j]/sum(expz[i,1:Ntype])
}
Y[i]~dcat(p[i,1:6])
}
}"
jags.mlogit <- run.jags(method="rjparallel",
data = jags.data,
#                      inits = list(inits1,inits2,inits3),
model=model,
n.chains = 3,
adapt=2500,
monitor=c(params),
burnin=20000,
sample=40000,
summarise=FALSE,
plots=FALSE
)
model<-"model{
## priors
#tau.R<-pow(sdBeta,-1)
#sdBeta ~ dgamma(0.001,0.001)
# Random intercept
#for (k in 1:Ntype){
#ranef[k]~ddexp(0,tau.R)
#}
## prior for coefficients
for(k in 1:2){
beta[k,1]<-0
}
for(k in 2:6){
for(j in 1:2){
beta[j,k]~dnorm(0, 1e-5)
}
## Likelihood
for(i in 1:N){
for(j in 1:6){
#z[i,j]<-beta[j,1]+ranef[galtype[i]]
z[i,j]<-beta[1,j]+beta[2,j]*bar[i]
expz[i,j]<-exp(z[i,j])
p[i,j]<-expz[i,j]/sum(expz[i,1:Ntype])
}
Y[i]~dcat(p[i,1:6])
}
}"
>>>>>>> Stashed changes
jags.mlogit <- run.jags(method="rjparallel",
data = jags.data,
#                      inits = list(inits1,inits2,inits3),
model=model,
n.chains = 3,
adapt=2500,
monitor=c(params),
burnin=20000,
sample=40000,
summarise=FALSE,
plots=FALSE
)
<<<<<<< Updated upstream
model
model<-"{
## priors
tau.R<-pow(sdBeta,-1)
sdBeta ~ dgamma(0.001,0.001)
# Random intercept
for (j in 1:Ntype){
ranef[j]~ddexp(0,tau.R)
}
for (k in 2:Ntype){
## prior for coefficients
for(j in 1:2){
beta[j,k]~dnorm(0,1e6)
}
}
## Likelihood
for(i in 1:N){
Y~dcat(p[i,1:Ntype])
for(k in 1:Ntype){
z[i,k]<-beta[1,k]+ranef[galtype[i]]
expz[i,k]<-exp(z[i,k])
p[i,k]<-expz[i,k]/sum(expz[i,1:Ntype])
}
}
for(j in 1:2)
{
beta[j,1]<-0
}
}"
params <- c("beta","ranef","p")
inits1=list(beta.0=rnorm(1,0,1),beta.1=rnorm(1,0,1),beta.2=rnorm(1,0,1))
inits2=list(beta.0=rnorm(1,0,1),beta.1=rnorm(1,0,1),beta.2=rnorm(1,0,1))
inits3=list(beta.0=rnorm(1,0,1),beta.1=rnorm(1,0,1),beta.2=rnorm(1,0,1))
library(parallel)
cl <- makeCluster(3)
jags.mlogit <- run.jags(method="rjparallel",
data = jags.data,
inits = list(inits1,inits2,inits3),
model=model,
n.chains = 3,
adapt=2500,
monitor=c(params),
burnin=20000,
sample=40000,
summarise=FALSE,
plots=FALSE
)
jags.mlogit <- run.jags(method="rjparallel",
data = jags.data,
#                      inits = list(inits1,inits2,inits3),
model=model,
n.chains = 3,
adapt=2500,
monitor=c(params),
burnin=20000,
sample=40000,
summarise=FALSE,
plots=FALSE
)
jagssamples <- as.mcmc.list(jags.mlogit)
var cutpt[n.subjects,n.cut];
model {
for (i in 1:n){
for (k in 1:n.cut){
z[i,k] <- (x[i]-cutpt[subject[i],k])/s[subject[i]]
logit(Q[i,k]) <- z[i,k]
}
P[i,1] <- 1 - Q[i,1]
for (k in 2:n.cut){
P[i,k] <- Q[i,k-1] - Q[i,k]
}
P[i,n.cut+1] <- Q[i,n.cut]
y[i] ~ dcat(P[i,])
}
for (j in 1:n.subjects){
for (k in 1:n.cut){
cutpt.raw[j,k] ~ dnorm(mu.c[k],tau.c[k])T(0,100)
}
cutpt[j,] <- sort(cutpt.raw[j,])
s[j] ~ dlnorm(mu.log.s,tau.log.s)
}
for (k in 1:n.cut){
mu.c[k] ~ dnorm(0, 1.E-6)T(0,100)
tau.c[k] <- pow(sigma.c[k],-2)
sigma.c[k] ~ dunif(0,1000)
}
mu.log.s ~ dnorm(0,0.0001)
tau.log.s <- pow(sigma.log.s,-2)
sigma.log.s ~ dunif(0,1000)
}
data <- list("x","y","subject","n.cut","n","n.subjects")
params <- c("cutpt","mu.c","sigma.c","s","mu.log.s","sigma.log.s")
set.seed(1234)
#set up the initializations
cutpt.inits <- array(dim= c(n.subjects,n.cut))
for (j in 1:n.subjects)
for (k in 1:n.cut){
cutpt.inits[j,k] <- 25+5*k+rnorm(1)
}
}
s.inits<-rep(100,n.subjects)  #  This needs to be large or we'll get an initialization error
mu.c.inits <- seq(30,75,5)
inits <- function () {list("cutpt.raw" = cutpt.inits,"s" = s.inits,
"mu.c" = mu.c.inits,"sigma.c" = runif(n.cut),
"mu.log.s"=rnorm(1),"sigma.log.s"=runif(1))}
fit <- jags(data,inits,params,"ord_cat_mlm.bug",n.chains=4,n.iter=1000)
library("R2jags", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
var cutpt[n.subjects,n.cut];
model {
for (i in 1:n){
for (k in 1:n.cut){
z[i,k] <- (x[i]-cutpt[subject[i],k])/s[subject[i]]
logit(Q[i,k]) <- z[i,k]
}
P[i,1] <- 1 - Q[i,1]
for (k in 2:n.cut){
P[i,k] <- Q[i,k-1] - Q[i,k]
}
P[i,n.cut+1] <- Q[i,n.cut]
y[i] ~ dcat(P[i,])
}
for (j in 1:n.subjects){
for (k in 1:n.cut){
cutpt.raw[j,k] ~ dnorm(mu.c[k],tau.c[k])T(0,100)
}
cutpt[j,] <- sort(cutpt.raw[j,])
s[j] ~ dlnorm(mu.log.s,tau.log.s)
}
for (k in 1:n.cut){
mu.c[k] ~ dnorm(0, 1.E-6)T(0,100)
tau.c[k] <- pow(sigma.c[k],-2)
sigma.c[k] ~ dunif(0,1000)
}
mu.log.s ~ dnorm(0,0.0001)
tau.log.s <- pow(sigma.log.s,-2)
sigma.log.s ~ dunif(0,1000)
}
data <- list("x","y","subject","n.cut","n","n.subjects")
params <- c("cutpt","mu.c","sigma.c","s","mu.log.s","sigma.log.s")
set.seed(1234)
#set up the initializations
cutpt.inits <- array(dim= c(n.subjects,n.cut))
for (j in 1:n.subjects)
for (k in 1:n.cut){
cutpt.inits[j,k] <- 25+5*k+rnorm(1)
}
}
s.inits<-rep(100,n.subjects)  #  This needs to be large or we'll get an initialization error
mu.c.inits <- seq(30,75,5)
inits <- function () {list("cutpt.raw" = cutpt.inits,"s" = s.inits,
"mu.c" = mu.c.inits,"sigma.c" = runif(n.cut),
"mu.log.s"=rnorm(1),"sigma.log.s"=runif(1))}
fit <- jags(data,inits,params,"ord_cat_mlm.bug",n.chains=4,n.iter=1000)
=======
>>>>>>> Stashed changes
